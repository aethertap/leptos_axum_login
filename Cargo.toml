#cargo-features=["codegen-backend"]

[package]
name = "leptos_axum_login"
version = "0.1.0"
edition = "2021"


[lib]
crate-type = ["cdylib", "rlib"]

#[target.x86_64-unknown-linux-gnu]
#linker = "clang"
#rustflags = ["-C", "link-arg=-fuse-ld=/usr/local/bin/mold"]
#codegen-backend = "cranelift"

[profile.rust-analyzer]
inherits = "dev"

#[unstable]
#codegen-backend = true

[dependencies]
axum = { version = "0.8", features=["macros"], optional = true }
console_error_panic_hook = "0.1"

leptos = { git = "https://github.com/leptos-rs/leptos",  features = ["nightly"] , tag="v0.8.0-rc2"}
leptos_axum = { git = "https://github.com/leptos-rs/leptos",  optional = true, tag="v0.8.0-rc2" }
leptos_meta = { git = "https://github.com/leptos-rs/leptos", tag="v0.8.0-rc2" }
leptos_router = { git = "https://github.com/leptos-rs/leptos", features = ["nightly"], tag="v0.8.0-rc2" }
leptos_router_macro = { git = "https://github.com/leptos-rs/leptos", tag="v0.8.0-rc2"}
reactive_graph = { git = "https://github.com/leptos-rs/leptos", tag="v0.8.0-rc2"}

tower = { version = "0.5", optional = true }
tower-http = { version = "0.6", features = ["fs"], optional = true }
tokio = { version = "1", features = ["full"], optional = true }
http = "1"

thiserror = "2"
wasm-bindgen = "=0.2.100"
tracing = { version = "0.1", optional = true }
cfg-if = "1.0.0"
axum-login = { version = "0.16.0", optional = true }
tower-sessions = { version = "0.13.0", optional = true }
password-hash = { version = "0.5.0", optional = true }
sqlx = { version = "0.8.1", features = ["sqlite", "runtime-tokio"], optional=true }
async-trait = {version="0.1.81",optional=true}
argon2 = {version="0.5.3",optional=true}
serde = { version = "1.0.209", features = ["derive"] }
structopt = {version="0.3.26", optional=true}
toml = {version="0.8.19",optional=true}
tower-sessions-sqlx-store = { version = "0.14.2", features = ["sqlite"], optional=true}
time = { version = "0.3.36", features = ["serde"] , optional=true}
serde_json = { version = "1.0.128", optional = true }
urlencoding = "2.1.3"

[features]
csr = ["leptos/csr"]
ssr = [
    "dep:axum",
    "dep:tower",
    "dep:tower-http",
    "dep:tokio",
    "dep:axum-login",
    "dep:tower-sessions",
    "dep:password-hash",
    "dep:sqlx",
    "dep:async-trait",
    "dep:argon2",
    "dep:structopt",
    "dep:toml",
    "dep:tower-sessions-sqlx-store",
    "dep:time",
    "dep:serde_json",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:leptos_axum",
    "dep:tracing",
]
nvim_analyzer=["ssr"]

[profile.dev]
opt-level = 1


[profile.dev.package."*"]
opt-level = 3

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "leptos_axum_login"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
tailwind-input-file = "style/input.css"
tailwind-config-file = "tailwind.config.js"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "0.0.0.0:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["csr"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

